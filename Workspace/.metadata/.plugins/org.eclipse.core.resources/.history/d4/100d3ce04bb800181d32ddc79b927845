package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import model.Cliente;
import model.ItemDePedido;
import model.Notebook;
import model.DAO.ClienteDAO;
import model.DAO.EnderecoDAO;
import model.DAO.NotebookDAO;
import model.DAO.UsuarioDAO;
import view.TelaAlterarCadastro;
import view.TelaCadastroCliente;
import view.TelaLogin;
import view.TelaMenuPrincipal;
import view.TelaPedidos;
import view.TelaSuporte;

public class Controle {

	static double total = 0;
	static int contador = 0;
	static int key = 0;
	boolean aberto = false;
	private Cliente cliente;
	private static ItemDePedido item;

	static List<ItemDePedido> itens = new ArrayList<ItemDePedido>();
	static List<Notebook> notebooks = NotebookDAO.buscarTodos();

	private TelaLogin telaLogin = new TelaLogin();
	private TelaCadastroCliente telaCadastroCliente = new TelaCadastroCliente();
	private TelaMenuPrincipal telaMenuPrincipal = new TelaMenuPrincipal();
	private TelaSuporte telaSuporte = new TelaSuporte();
	private TelaAlterarCadastro telaAlterarCadastro = new TelaAlterarCadastro();
	private TelaPedidos telaPedidos = new TelaPedidos();
	
	public Controle() {

		this.telaLogin.addCadastroListener(new CadastroListener());
		this.telaLogin.addLoginListener(new EfetuarLogin());
		this.telaCadastroCliente.addVoltarListener(new VoltarCadastroListener());
		this.telaCadastroCliente.addCadastrarListener(new CadastrarClienteListener());
		this.telaMenuPrincipal.addLogoutListener(new Logout());
		this.telaMenuPrincipal.addSuporteListener(new AbrirSuporteListener());
		this.telaSuporte.addVoltarSuporteListener(new VoltarSuporteListener());
		this.telaAlterarCadastro.addVoltarAlteracaoListener(new FecharAlteracaoDeCadastro());
		this.telaMenuPrincipal.addAlteracaoListener(new AbrirAlteracaoDeCadastro());
		this.telaMenuPrincipal.addPedidosListener(new AbrirPedidosListener());
		this.telaPedidos.addVoltarListener(new FecharrPedidosListener());
		this.telaLogin.setVisible(true);

	}

	class AbrirSuporteListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			telaMenuPrincipal.dispose();
			telaSuporte.setVisible(true);
			telaSuporte.setLocation(telaMenuPrincipal.getLocation());
		}

	}

	class VoltarSuporteListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			telaSuporte.dispose();
			telaMenuPrincipal.setVisible(true);

		}

	}

	/*
	 * Subclasse que cadastra o cliente no banco de dados. Conferindo se todos os
	 * campos estão preenchidos, e caso já esteja cadastrado o email, cpf ou
	 * usuario, será disparada uma notificação informando o usuário.
	 */
	class CadastroListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			telaLogin.dispose();
			telaCadastroCliente.setVisible(true);
		}

	}

	/*
	 * Subclasse que fecha a tela de cadastro e leva até a tela de login.
	 */
	class VoltarCadastroListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			telaCadastroCliente.dispose();
			telaLogin.setVisible(true);
		}

	}

	/*
	 * Subclasse que cadastra o cliente no banco de dados. Conferindo se todos os
	 * campos estão preenchidos, e caso já esteja cadastrado o email, cpf ou
	 * usuario, será disparada uma notificação informando o usuário.
	 */
	class CadastrarClienteListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			String cpfFind = telaCadastroCliente.getTextField_11();
			String usuarioFind = telaCadastroCliente.getTextField_3();
			int validador = 0;
			int condicional = 0;
			String senha = telaCadastroCliente.getPasswordField();
			if (telaCadastroCliente.getTextField() == null || telaCadastroCliente.getTextField().trim().equals("")) {
				validador += 1;
			}
			if (telaCadastroCliente.getTextField_1() == null
					|| telaCadastroCliente.getTextField_1().trim().equals("")) {
				validador += 1;
			}
			if (telaCadastroCliente.getTextField_2() == null
					|| telaCadastroCliente.getTextField_2().trim().equals("")) {
				validador += 1;
			}
			if (telaCadastroCliente.getTextField_3() == null
					|| telaCadastroCliente.getTextField_3().trim().equals("")) {
				validador += 1;
			}
			if (telaCadastroCliente.getTextField_4() == null
					|| telaCadastroCliente.getTextField_4().trim().equals("")) {
				validador += 1;
			}
			if (telaCadastroCliente.getTextField_5() == null
					|| telaCadastroCliente.getTextField_5().trim().equals("")) {
				validador += 1;
			}
			if (telaCadastroCliente.getTextField_6() == null
					|| telaCadastroCliente.getTextField_6().trim().equals("")) {
				validador += 1;

			}
			if (telaCadastroCliente.getTextField_7() == null
					|| telaCadastroCliente.getTextField_7().trim().equals("")) {
				validador += 1;
			}
			if (telaCadastroCliente.getTextField_8() == null
					|| telaCadastroCliente.getTextField_8().trim().equals("")) {
				validador += 1;
			}
			if (telaCadastroCliente.getTextField_9() == null
					|| telaCadastroCliente.getTextField_9().trim().equals("")) {
				validador += 1;
			}
			if (telaCadastroCliente.getComboBox() == null || telaCadastroCliente.getComboBox().trim().equals("N/A")) {
				validador += 1;
			}
			if (telaCadastroCliente.getTextField_11() == null
					|| telaCadastroCliente.getTextField_11().trim().equals("")) {
				validador += 1;
			}
			if (validador > 0) {
				telaCadastroCliente.setCamposErro();
				condicional += 1;
			}
			if (condicional == 0) {
				if (ClienteDAO.ConferirCpf(cpfFind) == true) {
					validador = +1;
					telaCadastroCliente.setCpfErro();
				}
				if (UsuarioDAO.ConferirUsuario(usuarioFind) == true) {
					validador = +1;
					telaCadastroCliente.setUsuarioErro();
				}
				if (validar(telaCadastroCliente.getTextField_2()) == false) {
					telaCadastroCliente.setEmailInvalido();
					validador += 1;
				}
				if (senha == null || senha.trim().equals("")) {
					validador += 1;
				}
			}
			if (validador == 0) {
				int tipo = 1;
				UsuarioDAO.inserir(telaCadastroCliente.getTextField_3(), senha, tipo);
				ClienteDAO.inserir(telaCadastroCliente.getTextField_11(), telaCadastroCliente.getTextField(),
						telaCadastroCliente.getTextField_2(), telaCadastroCliente.getTextField_1(),
						telaCadastroCliente.getTextField_3(), senha, tipo);
				EnderecoDAO.inserir(telaCadastroCliente.getTextField_5(), telaCadastroCliente.getTextField_6(),
						telaCadastroCliente.getTextField_7(), telaCadastroCliente.getTextField_8(),
						telaCadastroCliente.getTextField_9(), telaCadastroCliente.getComboBox(),
						telaCadastroCliente.getTextField_4(), telaCadastroCliente.getTextField_11());
				boolean conf = telaCadastroCliente.setCadastroRealizado();
				if (conf == true) {
					telaCadastroCliente.dispose();
					telaLogin.setVisible(true);
					telaCadastroCliente.setTextField("");
					telaCadastroCliente.setTextField_1("");
					telaCadastroCliente.setTextField_2("");
					telaCadastroCliente.setTextField_3("");
					telaCadastroCliente.setTextField_4("");
					telaCadastroCliente.setTextField_5("");
					telaCadastroCliente.setTextField_6("");
					telaCadastroCliente.setTextField_7("");
					telaCadastroCliente.setTextField_8("");
					telaCadastroCliente.setTextField_9("");
					telaCadastroCliente.setTextField_11("");
					telaCadastroCliente.setPasswordField("");
				}
			}

		}

	}

	/*
	 * Subclasse que busca pelo login e senha do cliente no banco de dados. caso não
	 * seja encontrado será disparada uma notificação informando ao usuário o erro.
	 * caso contrário, a variável cliente armazenará os dados do cliente encontrado,
	 * em seguida será fechada a tela de login e aberta a tela do menu do cliente.
	 */
	class EfetuarLogin implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			try {
				cliente = ClienteDAO.buscarPorLoginSenha(telaLogin.getTextField(), telaLogin.getPasswordField());
				telaMenuPrincipal.setCliente(cliente);
				telaMenuPrincipal.setVisible(true);
				telaLogin.dispose();
				telaLogin.setPasswordField("");
				telaLogin.setTextField("");

				// verificando se os produtos ja foram exbidos anteriormente.
				if (aberto == false) {
					aberto = true;
					for (Notebook notebook : notebooks) {
						String img = notebook.getFigura();
						String titulo = notebook.getDescricao();
						double preco = notebook.getPrecoUnitario();
						telaMenuPrincipal.construirProdutos(img, titulo, preco, notebook);

					}

				}

			} catch (NullPointerException e) {
				telaLogin.setErroAoProcurarUsuario();

			}

		}

	}

	/*
	 * Subclasse que fecha o menu do cliente e abre a tela de login, delogando o
	 * cliente.
	 */
	class Logout implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			cliente = null;
			telaMenuPrincipal.dispose();
			telaLogin.setVisible(true);
		}

	}

	class AbrirAlteracaoDeCadastro implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			telaMenuPrincipal.setEnabled(false);
			telaAlterarCadastro.setLocation(telaMenuPrincipal.getLocation());
			telaAlterarCadastro.setVisible(true);

		}

	}

	class FecharAlteracaoDeCadastro implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			telaAlterarCadastro.dispose();
			telaMenuPrincipal.setEnabled(true);
			telaMenuPrincipal.setVisible(true);

		}

	}

	class AbrirPedidosListener implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent arg0) {
			telaMenuPrincipal.setEnabled(false);
			telaPedidos.setVisible(true);
			telaPedidos.setLocation(telaMenuPrincipal.getLocation());
			
		}
		
	}
	
	class FecharrPedidosListener implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent arg0) {
			// TODO Auto-generated method stub
			
		}
		
	}
	
	
	/*
	 * Método que valida se o email inserido é real ou não.
	 */
	public static boolean validar(String email) {
		boolean isEmailIdValid = false;
		if (email != null && email.length() > 0) {
			String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
			Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
			Matcher matcher = pattern.matcher(email);
			if (matcher.matches()) {
				isEmailIdValid = true;
			}
		}
		return isEmailIdValid;
	}

	public static int metodoContar() {
		for (int i = 0; i < notebooks.size(); i++) {
			contador++;

		}
		return contador;
	}

	public static ItemDePedido addItemDePedido(int qtde, double subtotal, Notebook notebook) {
		item = new ItemDePedido(qtde, subtotal, notebook);
		itens.add(item);
		return item;
	}

	public static void deletarItem(ItemDePedido item) {
		itens.remove(item);

	}

	public static void main(String[] args) {
		new Controle();
	}

}
